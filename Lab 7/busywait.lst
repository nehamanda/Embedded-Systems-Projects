


ARM Macro Assembler    Page 1 


    1 00000000         ; BusyWait.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         
    7 00000000         ; As part of Lab 7, students need to implement these two
                        functions
    8 00000000         ; This file is in the inc folder so it automatically wil
                       l be applied to labs 7 8 9 and 10
    9 00000000         
   10 00000000         
   11 00000000                 EXPORT           SPIOutCommand
   12 00000000                 EXPORT           SPIOutData
   13 00000000         
   14 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   15 00000000                 THUMB
   16 00000000                 ALIGN
   17 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
   18 00000000         
   19 00000000         ; ***********SPIOutCommand*****************
   20 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   21 00000000         ; Inputs: R0 = 32-bit command (number)
   22 00000000         ;         R1 = 32-bit SPI status register address
   23 00000000         ;         R2 = 32-bit SPI data register address
   24 00000000         ;         R3 = 32-bit GPIO port address for D/C
   25 00000000         ; Outputs: none
   26 00000000         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   27 00000000         ; Note: must be AAPCS compliant
   28 00000000         ; Note: access to bit 6 of GPIO must be friendly
   29 00000000         SPIOutCommand
   30 00000000 E92D 0FF0       PUSH             {R4-R11}
   31 00000004         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 4,
   32 00000004         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   33 00000004         ;3) Clear D/C (GPIO bit 6) to zero, be friendly (R3 has 
                       address)
   34 00000004         ;4) Write the command to the SPI data register (R2 has a
                       ddress)
   35 00000004         ;5) Read the SPI status register (R1 has address) and ch
                       eck bit 4,
   36 00000004         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   37 00000004         
   38 00000004         loop
   39 00000004 680C            LDR              R4, [R1]
   40 00000006 F004 0410       AND              R4, #0x10
   41 0000000A 2C00            CMP              R4, #0x00
   42 0000000C D1FA            BNE              loop
   43 0000000E         
   44 0000000E 681D            LDR              R5, [R3]
   45 00000010 F025 0540       BIC              R5, #0x40



ARM Macro Assembler    Page 2 


   46 00000014 601D            STR              R5, [R3]    ;clears dc
   47 00000016         
   48 00000016 7010            STRB             R0, [R2]
   49 00000018         
   50 00000018         loop2
   51 00000018 680C            LDR              R4, [R1]
   52 0000001A F004 0410       AND              R4, #0x10
   53 0000001E 2C00            CMP              R4, #0
   54 00000020 D1FA            BNE              loop2
   55 00000022 E8BD 0FF0       POP{R4-R11}
   56 00000026         
   57 00000026 4770            BX               LR          ;   return
   58 00000028         
   59 00000028         
   60 00000028         
   61 00000028         ; ***********SPIOutData*****************
   62 00000028         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   63 00000028         ; Inputs: R0 = 32-bit data (number)
   64 00000028         ;         R1 = 32-bit SPI status register address
   65 00000028         ;         R2 = 32-bit SPI data register address
   66 00000028         ;         R3 = 32-bit GPIO port address for D/C
   67 00000028         ; Outputs: none
   68 00000028         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   69 00000028         ; Note: must be AAPCS compliant
   70 00000028         ; Note: access to bit 6 of GPIO must be friendly
   71 00000028         SPIOutData
   72 00000028 E92D 0FF0       PUSH             {R4-R11}
   73 0000002C         ; --UUU-- Code to write data to the LCD
   74 0000002C         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 1,
   75 0000002C         ;2) If bit 1 is low, loop back to step 1 (wait for TNF b
                       it to be high)
   76 0000002C         ;3) Set D/C (GPIO bit 6) to one, be friendly (R3 has add
                       ress)
   77 0000002C         ;4) Write the data to the SPI data register (R2 has addr
                       ess)
   78 0000002C         
   79 0000002C         loope
   80 0000002C 680C            LDR              R4, [R1]
   81 0000002E F004 0402       AND              R4, #0x02
   82 00000032 2C00            CMP              R4, #0x00
   83 00000034 D0FA            BEQ              loope
   84 00000036         
   85 00000036 681D            LDR              R5, [R3]
   86 00000038 F045 0540       ORR              R5, #0x40
   87 0000003C 601D            STR              R5, [R3]
   88 0000003E         
   89 0000003E 7010            STRB             R0, [R2]
   90 00000040         
   91 00000040 E8BD 0FF0       POP              {R4-R11}
   92 00000044 4770            BX               LR          ;return
   93 00000046         ;****************************************************
   94 00000046         
   95 00000046 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   96 00000048                 END                          ; end of file



ARM Macro Assembler    Page 3 


Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\busywait.d -o.\busywait.o -I.\RTE\_Lab7 -IC:\Users\neham\App
Data\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\neham\AppDat
a\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVA
L SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 5
38" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_
RTE_ SETA 1" --list=.\busywait.lst ..\inc\BusyWait.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 14 in file ..\inc\BusyWait.s
   Uses
      None
Comment: .text unused
SPIOutCommand 00000000

Symbol: SPIOutCommand
   Definitions
      At line 29 in file ..\inc\BusyWait.s
   Uses
      At line 11 in file ..\inc\BusyWait.s
Comment: SPIOutCommand used once
SPIOutData 00000028

Symbol: SPIOutData
   Definitions
      At line 71 in file ..\inc\BusyWait.s
   Uses
      At line 12 in file ..\inc\BusyWait.s
Comment: SPIOutData used once
loop 00000004

Symbol: loop
   Definitions
      At line 38 in file ..\inc\BusyWait.s
   Uses
      At line 42 in file ..\inc\BusyWait.s
Comment: loop used once
loop2 00000018

Symbol: loop2
   Definitions
      At line 50 in file ..\inc\BusyWait.s
   Uses
      At line 54 in file ..\inc\BusyWait.s
Comment: loop2 used once
loope 0000002C

Symbol: loope
   Definitions
      At line 79 in file ..\inc\BusyWait.s
   Uses
      At line 83 in file ..\inc\BusyWait.s
Comment: loope used once
6 symbols
341 symbols in table
